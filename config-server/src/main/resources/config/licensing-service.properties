# SERVER CONFIGURATION
# Port on which server will listen for incoming connections
server.port=8080
# SPRING DATA JPA CONFIGURATION
# Hibernate DDL auto (none, validate, update, create, create-drop)
spring.jpa.hibernate.ddl-auto=none
# Database dialect for JPA and Hibernate
spring.jpa.database=POSTGRESQL
# Database platform to be used by Spring Boot
spring.datasource.platform=postgres
# Enables logging of SQL statements
spring.jpa.show-sql=true
# Strategy for naming database elements
spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImprovedNamingStrategy
# Hibernate dialect
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
# Database driver class
spring.database.driverClassName=org.postgresql.Driver
# Check the connection while it is idle
spring.datasource.testWhileIdle=true
# SQL query to validate connections from the pool
spring.datasource.validationQuery=SELECT 1
# MANAGEMENT ENDPOINTS CONFIGURATION
# Endpoints exposed over HTTP
management.endpoints.web.exposure.include=*
# Enable all endpoints by default
management.endpoints.enabled-by-default=true
# EUREKA CONFIGURATION
# Use IP address for communication
eureka.instance.preferIpAddress=true
# Register this service with Eureka
eureka.client.registerWithEureka=true
# Fetch the registry from Eureka
eureka.client.fetchRegistry=true
# Expose specific endpoints over HTTP
management.endpoints.web.expose=health,metrics
# Enable health and metrics endpoints
management.endpoint.health.enabled=true
management.endpoint.metrics.enabled=true
# RESILIENCE4J CIRCUIT BREAKER CONFIGURATION
# Enable circuit breaker calls metrics
management.metrics.enable.resilience4j.circuitbreaker.calls=true
# Enable circuit breakers health indicators
management.health.circuitbreakers.enabled=true
# Enable rate limiters health indicators
management.health.ratelimiters.enabled=true
# Show details of health endpoint
management.endpoint.health.show-details=always
# Register health indicators for default circuit breaker configurations
resilience4j.circuitbreaker.configs.default.registerHealthIndicator=true
# Specific service circuit breaker configurations
resilience4j.circuitbreaker.instances.licenseService.baseConfig=default
resilience4j.circuitbreaker.instances.organizationService.baseConfig=default
resilience4j.circuitbreaker.instances.licenseService.registerHealthIndicator=true
# Parameters for license service circuit breaker
resilience4j.circuitbreaker.instances.licenseService.ringBufferSizeInClosedState=5
resilience4j.circuitbreaker.instances.licenseService.ringBufferSizeInHalfOpenState=3
resilience4j.circuitbreaker.instances.licenseService.waitDurationInOpenState=10s
resilience4j.circuitbreaker.instances.licenseService.failureRateThreshold=50
# Parameters for license service bulkhead
resilience4j.bulkhead.instances.bulkheadLicenseService.maxWaitDuration=10ms
resilience4j.bulkhead.instances.bulkheadLicenseService.maxConcurrentCalls=20
# Parameters for license service bulkhead thread pool
resilience4j.thread-pool-bulkhead.instances.bulkheadLicenseService.maxThreadPoolSize=1
resilience4j.thread-pool-bulkhead.instances.bulkheadLicenseService.coreThreadPoolSize=1
resilience4j.thread-pool-bulkhead.instances.bulkheadLicenseService.queueCapacity=1
resilience4j.thread-pool-bulkhead.instances.bulkheadLicenseService.keepAliveDuration=20ms
# Parameters for license service retry
resilience4j.retry.instances.retryLicenseService.maxRetryAttempts=5
resilience4j.retry.instances.retryLicenseService.waitDuration=10000
resilience4j.retry.instances.retryLicenseService.retry-exceptions[0]=java.util.concurrent.TimeoutException
# Parameters for license rate limiter
resilience4j.ratelimiter.instances.licenseService.timeoutDuration=1000ms
resilience4j.ratelimiter.instances.licenseService.limitRefreshPeriod=5000
resilience4j.ratelimiter.instances.licenseService.limitForPeriod=5